# -*- coding: utf-8 -*-
"""agropro.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oWVRY5wSlvslkN-kZLWxejnmEMKXPZMS
"""

import streamlit as st
from datetime import datetime
import google.generativeai as genai
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.document_loaders import PyPDFLoader, TextLoader
from langchain.document_loaders.unstructured import UnstructuredFileLoader
from dotenv import load_dotenv
import tempfile
import os
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_RIGHT
from io import BytesIO
from PIL import Image
import pickle
from PyPDF2 import PdfReader

load_dotenv()

try:
    from langchain.vectorstores import FAISS
    from langchain.embeddings import HuggingFaceEmbeddings
    embeddings = HuggingFaceEmbeddings()
except ImportError:
    st.error("Error: Some required packages are missing. Please install the required packages.")
    st.info("Run the following command to install the necessary packages:")
    st.code("pip install langchain chromadb sentence_transformers")
    st.stop()

st.set_page_config(
    page_title="AgroPro - Your Agriculture Companion",
    page_icon="agropro.jpg",
    layout="centered",
    initial_sidebar_state="expanded"
)

# Access the Gemini API key
gemini_api_key = st.secrets["gemini"]["api_key"]

# Configure the Gemini API
genai.configure(api_key=gemini_api_key)
model = genai.GenerativeModel('gemini-pro')

# Initialize HuggingFace embeddings
embeddings = HuggingFaceEmbeddings()

def get_current_time():
    return datetime.now().strftime("%H:%M")

def process_document(file):
    MAX_FILE_SIZE = 15 * 1024 * 1024  # 15 MB limit
    if file.size > MAX_FILE_SIZE:
        st.error(f"File size exceeds the limit of 15MB. Please upload a smaller file.")
        return None

    temp_file_path = None
    try:
        with tempfile.NamedTemporaryFile(delete=False, suffix=os.path.splitext(file.name)[1]) as temp_file:
            # Read and write the file in chunks
            chunk_size = 3 *1024 * 1024  # 3 MB chunks
            while True:
                chunk = file.read(chunk_size)
                if not chunk:
                    break
                temp_file.write(chunk)
            temp_file_path = temp_file.name

        if file.name.endswith('.pdf'):
            texts = process_pdf(temp_file_path)
        elif file.name.endswith('.docx'):
            loader = UnstructuredFileLoader(temp_file_path)
            documents = loader.load()
            texts = [doc.page_content for doc in documents]
        elif file.name.endswith('.txt'):
            with open(temp_file_path, 'r') as f:
                texts = f.readlines()
        else:
            st.error("Unsupported file format. Please upload a PDF, DOCX, or TXT file.")
            return None

        text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
        split_texts = text_splitter.split_text('\n'.join(texts))

        # Create FAISS index in batches
        vectorstore = None
        batch_size = 1000
        for i in range(0, len(split_texts), batch_size):
            batch = split_texts[i:i+batch_size]
            if vectorstore is None:
                vectorstore = FAISS.from_texts(batch, embeddings)
            else:
                vectorstore.add_texts(batch)

        return vectorstore
    except ImportError as e:
        st.error("Error: Missing dependencies for processing this file type.")
        st.info("Please install the required packages by running:")
        st.code("pip install pypdf faiss-cpu")
        return None
    except Exception as e:
        st.error(f"An error occurred while processing the document: {str(e)}")
        return None
    finally:
        if temp_file_path and os.path.exists(temp_file_path):
            try:
                os.unlink(temp_file_path)
            except Exception as e:
                st.warning(f"Could not remove temporary file: {str(e)}")

def process_pdf(file_path):
    texts = []
    with open(file_path, 'rb') as file:
        reader = PdfReader(file)
        for page in reader.pages:
            texts.append(page.extract_text())
    return texts

def save_vectorstore(vectorstore, filename="vectorstore.pkl"):
    with open(filename, "wb") as f:
        pickle.dump(vectorstore, f)

def load_vectorstore(filename="vectorstore.pkl"):
    if os.path.exists(filename):
        with open(filename, "rb") as f:
            return pickle.load(f)
    return None

class ConversationBuffer:
    def __init__(self, max_turns=5):
        self.buffer = []
        self.max_turns = max_turns

    def add_message(self, role, content):
        self.buffer.append({"role": role, "content": content})
        if len(self.buffer) > self.max_turns * 2:  # *2 because each turn has a user and an assistant message
            self.buffer = self.buffer[-self.max_turns * 2:]

    def get_context(self):
        return "\n".join([f"{msg['role']}: {msg['content']}" for msg in self.buffer])

def safe_get_gemini_response(conversation_buffer, prompt, vectorstore=None):
    try:
        return get_gemini_response(conversation_buffer, prompt, vectorstore)
    except Exception as e:
        st.error(f"An error occurred: {str(e)}. Please try again.")
        return "I'm sorry, I encountered an error. Could you please rephrase your question?"

def get_gemini_response(conversation_buffer, prompt, vectorstore=None):
    base_context = """You are AgroPro, a helpful and knowledgeable AI specializing in agriculture, farming practices, crop science, soil health, and sustainable agriculture. When assisting users:

    1. Offer practical advice for farmers and agricultural professionals on topics like crop management, pest control, and sustainable practices.
    2. Tailor responses for different experience levels, from novice farmers to agriculture experts.
    3. Provide concise, relevant information, aiming to increase user understanding of agricultural science and industry trends.
    4. Encourage environmental responsibility by promoting sustainable agricultural methods.
    5. Suggest real-world applications for farming techniques, such as water conservation, soil management, and organic farming practices.
    6. Motivate users to improve their practices by suggesting resources and tools for further learning.

    Previous conversation:
    """
    conversation_context = conversation_buffer.get_context()

    if vectorstore:
        relevant_docs = vectorstore.similarity_search(prompt, k=2)
        doc_context = "\n".join([doc.page_content for doc in relevant_docs])
        full_context = f"{base_context}\n{conversation_context}\n\nRelevant document content:\n{doc_context}\n\nUser query: {prompt}"
    else:
        full_context = f"{base_context}\n{conversation_context}\n\nUser query: {prompt}"

    try:
        response = model.generate_content(full_context)
        if hasattr(response, 'text'):
            return response.text
        elif hasattr(response, 'parts'):
            return ' '.join(part.text for part in response.parts)
        else:
            return str(response)
    except Exception as e:
        st.error(f"An error occurred while generating the response: {str(e)}")
        return "I'm sorry, I encountered an error. Could you please try again or rephrase your question?"

def export_conversation_to_pdf():
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    styles = getSampleStyleSheet()
    story = []

    # Create custom styles for "You" and "AgroPro"
    styles.add(ParagraphStyle(name='You', parent=styles['Normal'], spaceAfter=10, textColor='blue'))
    styles.add(ParagraphStyle(name='AgroPro', parent=styles['Normal'], spaceAfter=10, textColor='green', alignment=TA_RIGHT))

    for message in st.session_state.messages:
        if message['role'] == 'user':
            story.append(Paragraph(f"You: {message['content']}", styles['You']))
        else:
            story.append(Paragraph(f"AgroPro: {message['content']}", styles['AgroPro']))
        story.append(Spacer(1, 12))

    doc.build(story)
    return buffer

def chat_interface():
    st.title("AgroPro - Your Agriculture Companion")
    st.subheader("Ask me anything about agriculture and sustainable farming!")

    # Initialize vectorstore in session state if it doesn't exist
    if "vectorstore" not in st.session_state:
        st.session_state.vectorstore = load_vectorstore()

    # Sidebar for logo, document upload and session management
    with st.sidebar:
        # Add the logo at the top of the sidebar
        logo = Image.open("agropro.jpg")
        st.image(logo, width=150)  # Adjust width as needed

        st.markdown("""
        ### Hi, I'm AgroPro, your agriculture expert!
        I'm here to help you improve your farming practices with sustainable and science-backed methods.

        ---

        AgroPro is developed by Joshua Iwuoha. This project aims to empower farmers and agriculture enthusiasts with knowledge.

        ---
        """)

        st.header("